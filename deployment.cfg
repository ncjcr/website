# Deployment buildout
# ===================

[buildout]
extends =
    buildout.d/base.cfg
    buildout.d/hostsports.cfg
    buildout.d/users.cfg
    buildout.d/passwords.cfg
    buildout.d/databases.cfg
    buildout.d/parts/memcached.cfg
    buildout.d/parts/haproxy.cfg
    buildout.d/parts/varnish.cfg
    buildout.d/parts/apache-vhost.cfg
    buildout.d/parts/supervisor.cfg

parts =
    instance1
    instance2

    zodbpack
    zodbpack-config
    zodbpack-crontab

    logrotate

    ${buildout:memcached-parts}
    ${buildout:haproxy-parts}
    ${buildout:varnish-parts}
    ${buildout:apache-vhost-parts}
    ${buildout:supervisor-parts}

    relbackup
    blobbackup
    backup
    backup-crontab

    precompiler

# Backups directory
backups-directory = ${:directory}/var/backups

# If you release internal eggs to an internal server, you should reference
# a page that lists all those eggs here. The easiest way is to allow scp
# access to a directory that's served by nginx or Apache and enable automatic
# directory indexing/listing of that directory. Then use ./bin/mkrelease to
# release your internal eggs here, and add to the [versions] block in
# versions.cfg.

# find-links = http://my-internal-server/eggs

# Packages to check out/update when buildout is run
# Clear this out if you want to stick to internally released eggs - see above.
auto-checkout = *

# Make sure buildout never attempts to update packages automatically for
# production use.
always-checkout = false

# Fail buildout if any package is not pinned
allow-picked-versions = false

# How should varnish store its cache? Increase thesize, in megabytes, as required
[varnish-options]
storage = malloc,128M

[limits]
# How many open files are allowed? This affects the number of concurrent
# connections. On some operating systems, this is set on startup per user
# as the ulimit
open-files = 100
# Timeout of inactivity for Beaker sessions
session-timeout = 600

[urls]
# This URL is used in the Apache configuration to serve an error page when
# HAProxy detects no viable backend
fallback = /system_error
# This URL is used in subsequent HTTP proxies to serve as a monitor URL
# in supervisord
monitor = _ping_
varnish-monitor = ${:monitor}
haproxy-monitor = ${:monitor}

[sites]
# Plone site ids - used in virtual hosting
main = ${hosts:public}

# Zope instance template
[instance]
recipe = plone.recipe.zope2instance
user = ${users:zope-admin}:${passwords:zope-admin}
debug-mode = off
verbose-security = off
effective-user = ${users:zope-process}
http-fast-listen = off
zserver-threads = 2
zodb-cache-size = 10000
eggs =
    ${eggs:main}
    ${eggs:relstorage}

# Configure Beaker sessions with file storage
zope-conf-additional =
    <product-config beaker>
        session.type            ext:memcached
        session.lock_dir        ${buildout:directory}/var/sessions/lock
        session.url             ${hosts:memcached}:${ports:memcached}
        session.key             beaker.session
        session.secret          secret
        session.secure          true
        session.timeout         ${limits:session-timeout}
        session.cookie_expires  True
    </product-config>
    <product-config collective.ploneldapconf>
        plugin-id               new-college-ad
        binduid                 ${users:ldap}
        bindpwd                 ${passwords:ldap}
    </product-config>

# Configure logging to syslog
event-log-custom =
    <syslog>
        level all
        format zope[%(process)s]: [%(levelname)s] %(name)s: %(message)s
        facility local1
        address ${hosts:syslog}:${ports:syslog}
    </syslog>

# Configure RelStorage
rel-storage =
    type mysql
    blob-dir ${buildout:directory}/var/blobstorage
    cache-servers ${hosts:memcached}:${ports:memcached}
    host ${hosts:relstorage}
    port ${ports:relstorage}
    db ${databases:relstorage}
    user ${users:relstorage}
    passwd ${passwords:relstorage}

# Configure BLOB storage
shared-blob = on

[instance1]
<= instance
http-address = ${hosts:instance1}:${ports:instance1}

[instance2]
<= instance
http-address = ${hosts:instance2}:${ports:instance2}

# Install the bin/zodbpack script
# Run: ``bin/zodbpack etc/zodbpack.conf``
[zodbpack]
recipe = zc.recipe.egg
eggs =
    ${eggs:relstorage}
scripts = zodbpack

# Generate ``etc/zodbpack.conf``
[zodbpack-config]
recipe = collective.recipe.template
input = ${buildout:directory}/buildout.d/templates/zodbpack.conf
output = ${buildout:directory}/etc/zodbpack.conf

[zodbpack-crontab]
recipe = z3c.recipe.usercrontab
times = 0 4 * * 6
command = ${buildout:directory}/bin/zodbpack -d 14 ${zodbpack-config:output}

[logrotate]
recipe = collective.recipe.template
input = ${buildout:directory}/buildout.d/templates/logrotate
output = /etc/logrotate.d/${sites:main}

[relbackup]
recipe = collective.recipe.template
input = ${buildout:directory}/buildout.d/templates/relbackup
output = ${buildout:bin-directory}/relbackup
mode = 500
location = ${buildout:backups-directory}/rel

[blobbackup]
recipe = collective.recipe.backup
blob_storage = ${buildout:directory}/var/blobstorage
only_blobs = true

# Common backup directories
blob_backup_location = ${buildout:backups-directory}/blob
zodb_backup_location = ${buildout:backups-directory}/zodb

# Backup directories for blobs
blobbackuplocation = ${:blob_backup_location}/increment
blobsnapshotlocation = ${:blob_backup_location}/snapshot

# Backup directories for ZODB
# https://github.com/collective/collective.recipe.backup/issues/17
location = ${:zodb_backup_location}/increment
snapshotlocation = ${:zodb_backup_location}/snapshot

[backup]
recipe = collective.recipe.template
input = ${buildout:directory}/buildout.d/templates/backup
output = ${buildout:bin-directory}/backup
mode = 500

[backup-crontab]
recipe = z3c.recipe.usercrontab
times = 0 2 * * *
command = ${buildout:directory}/bin/backup

[precompiler]
# This recipe is used in production installs to compile
# .py and .po files so that the daemon doesn't try to do it.
# For options see http://pypi.python.org/pypi/plone.recipe.precompiler
recipe = plone.recipe.precompiler
eggs = ${instance:eggs}
compile-mo-files = true
extra-paths = ${buildout:directory}/products
