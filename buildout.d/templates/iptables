#!/bin/sh

# SLES setup
# ----------
#
# In ``/etc/sysconfig/SuSEfirewall2`` file you should set::
#
#     FW_CUSTOMRULES="/etc/sysconfig/scripts/SuSEfirewall2-custom
#
# and in ``/etc/sysconfig/scripts/SuSEfirewall2-custom``::
#
#     fw_custom_before_denyall() {
#         if [ -e ${iptables:output} ]; then
#             . ${iptables:output}
#         fi
#         true
#     }
#
# Then reload the firewall::
#
#    rcSuSEfirewall2 reload
#

restrict () {
    # Note that it does not makes sene for two users user1 and user2,
    # to have "restrict X Y user1" and "restrict X Y user2" at the
    # same time.
    iptables -I OUTPUT 1 -p tcp -d $1 --dport $2 -o lo \
             -m owner ! --uid-owner $3 -j REJECT
}

# Apache -> Varnish, Supervisor, HAProxy stats
restrict ${hosts:varnish} ${ports:varnish} ${users:httpd}
restrict ${hosts:supervisor} ${ports:supervisor} ${users:httpd}
restrict ${hosts:haproxy} ${ports:haproxy-stats} ${users:httpd}

# Varnish -> HAProxy
restrict ${hosts:haproxy} ${ports:haproxy} ${users:varnish}

# HAProxy -> Zope instances
restrict ${hosts:instance1} ${ports:instance1} ${users:haproxy}
restrict ${hosts:instance2} ${ports:instance2} ${users:haproxy}

# Zope instances -> Memcached
restrict ${hosts:memcached} ${ports:memcached} ${users:zope-process}

# root -> *. Note, that this rule also applies to supervisord that
# runs as root and its eventlisteners (*_httpok) that need to connect
# both to supervisord RPC and Varnish/HAProxy/Zope. It also allows to
# run `supervisorctl` without having su to "${users:httpd}".
iptables -I OUTPUT 1 -p tcp -o lo -m owner --uid-owner root -j ACCEPT
